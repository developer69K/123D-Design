//**************************************************************************/
// Copyright 2011 Autodesk, Inc.
// All rights reserved.
// 
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information written by Autodesk, Inc., and are
// protected by Federal copyright law. They may not be disclosed to third
// parties or copied or duplicated in any form, in whole or in part, without
// the prior written consent of Autodesk, Inc.
//**************************************************************************/
// DESCRIPTION: FXAA edge-antialiasing post-process
// AUTHOR: Eric Haines
// CREATED: June 2011
//**************************************************************************/

#define FXAA_PC 1
// In theory, we could try to use:
//#define FXAA_GLSL_130 1
// but that's for GLSL. It turns out Cg is similar enough to HLSL 3.0 that this works:
#define FXAA_HLSL_3 1
#define FXAA_LINEAR 0
#include "Fxaa.cgh"

// World-view-projection transformation.
float4x4 gWVPXf : WorldViewProjection 
<
string UIWidget = "None"; 
>;

float2 gFinalres : ViewportPixelSize;

// The source buffer and sampler.
texture2D gSourceTex = NULL;

sampler2D gSourceSamp : TextureSampler = sampler_state
{
    Texture = (gSourceTex);
};

// Vertex shader input structure.
struct VS_INPUT
{
    float4 Pos : POSITION;
    float3 UV : TEXCOORD0;
};

// Vertex shader output structure.
struct VS_TO_PS
{
    float4 HPos : POSITION;
    float3 UV : TEXCOORD0;
    float4 PosPos : TEXCOORD1;
};

// Vertex shader.
VS_TO_PS VS_NPR(VS_INPUT In)
{
    VS_TO_PS Out;

    // Transform the position from object space to clip space for output.
    Out.HPos = mul(gWVPXf, In.Pos);

    // Pass the texture coordinates unchanged.
    Out.UV = In.UV;

    float2 rcpFrame = 1.0/float2(gFinalres.x,gFinalres.y);
    Out.PosPos.xy = In.UV.xy - (0.5 * rcpFrame);
    Out.PosPos.zw = In.UV.xy + (0.5 * rcpFrame);

    return Out;
}

float4 PS_FXAA(VS_TO_PS In) : COLOR0
{
    float2 rcpFrame = 1.0/float2(gFinalres.x,gFinalres.y);
    float4 rcpFrameOpt = float4(2.0/gFinalres.x, 2.0/gFinalres.y, 0.5/gFinalres.x, 0.5/gFinalres.y);
	float4 rcpFrameOpt2 = float4(-2.0/gFinalres.x, -2.0/gFinalres.y, 2.0/gFinalres.x, 2.0/gFinalres.y);

	return FxaaPixelShader(float2(In.UV.xy), In.PosPos, gSourceSamp, gSourceSamp, gSourceSamp,
	    rcpFrame, rcpFrameOpt, rcpFrameOpt2, rcpFrameOpt2,
	    0.75f, 0.166f, 0.0833f, 8.0f, 0.125f, 0.05f, float4(0.0f,0.0f,0.0f,0.0f));	
}

// Looks for only wherever the IDs do not match; depths ignored.
technique Main
{
    pass p0
    {
        VertexProgram = compile glslv VS_NPR();
        FragmentProgram = compile glslf PS_FXAA();
    }
}